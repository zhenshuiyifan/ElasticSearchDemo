PUT /movies/movie/1/_create
{
    "title":"The God Father",
    "director":"Francis Ford Coppola",
	"year":1972
}

PUT /movies/movie/2
{
    "title":"The Boxcar Children",
    "director":"Four orphaned and homeless siblings happen upon an abandoned boxcar, which, with a little creativity and hard work, they gradually furnish with all the comforts of home. Fearful that they will be sent to live with the reputedly cruel grandfather they have never met, the children keep their new home a secret—until a serious illness forces them to reveal themselves in order to save young Violet.",
    "year":2000
}

PUT /movies/movie/3
{
    "title":"The God Father",
    "director":"Francis Ford Coppola",
    "year":1972
}

GET /_count?petty '-d'
GET /_count
{
    "query":{
        "match_all":{}
    }
}

GET /movies/_mapping

GET /movies/_settings
GET /movies/movie/_search

GET /movies/movie/1

GET /_search


GET /movies/movie

GET /movies/movie/_mapping

DELETE /movies/movie/1



PUT /megacorp/employee/1
{
    "first_name" : "John",
    "last_name" :  "Smith",
    "age" :        25,
    "about" :      "I love to go rock climbing",
    "interests": [ "sports", "music" ]
}

PUT /megacorp/employee/2
{
    "first_name" :  "Jane",
    "last_name" :   "Smith",
    "age" :         32,
    "about" :       "I like to collect rock albums",
    "interests":  [ "music" ]
}

PUT /megacorp/employee/3
{
    "first_name" :  "Douglas",
    "last_name" :   "Fir",
    "age" :         35,
    "about":        "I like to build cabinets",
    "interests":  [ "forestry" ]
}
# 简单搜搜

GET /megacorp/employee/_search

GET /megacorp/employee/_search?q=last_name:Smith

# DSL 查询

GET /megacorp/employee/_search
{
 "query" :{
     "match": {
        "last_name": "Smith"
     }
 }
}

# 复杂搜索
GET /megacorp/employee/_search
{
    "query": {
        "filtered": {
            "filter": {
                "range": {
                    "age": {
                        "gt": 30
                    }
                }
            },
            "query": {
                "match": {
                    "last_name": "Smith"
                }
            }
        }
    }
}

# 短语搜索 + 高亮
GET /megacorp/employee/_search
{
    "query": {
        "match_phrase": {
           "about": "rock climbing"
        }
    } ,
    "highlight": {
        "fields": {
            "about":{}
    }
}
}

# 聚合
GET /megacorp/employee/_search
{
    "query": {
    "match": {
       "last_name": "smith"
    }
    }, 
  "aggs": {
    "all_interests": {
      "terms": { "field": "interests" }
    }
  }
}

# 聚合分级汇总
GET /megacorp/employee/_search
{
  "aggs": {
    "all_interests": {
      "terms": { "field": "interests" },
      "aggs":{
          "avg_age":{
              "avg":{"field":"age"}
          }
      }     
    }
  }
}

GET /megacorp/employee/1/_source

HEAD /megacorp/employee/1

# 版本控制

PUT /website/blog/1/_create
{
  "title": "My first blog entry",
  "text":  "Just trying this out..."
}
DELETE /website/blog/1

GET /website/blog/_search

PUT /website/blog/1?version=1
{
  "title": "My first blog entry",
  "text":  "Starting to get the hang of this..."
}

# 外部版本号

PUT /website/blog/2?version=6&version_type=external
{
  "title": "My first external blog entry",
  "text":  "Starting to get the hang of this..."
}

POST /website/blog/1/_update
{
   "doc" : {
      "tags" : [ "testing" ],
      "views": 0
   }
}

# 使用脚本更新

POST /website/blog/1/_update
{
   "script" : "ctx._source.views+=1"
}


POST /website/blog/1/_update
{
   "script" : "ctx._source.tags+=new_tag",
   "params" : {
      "new_tag" : "search"
   }
}


POST /website/blog/1/_update
{
    "script":"ctx._source.tags+=new_tag",
    
    "params":{
        "new_tag":"search"
    }
}

POST /website/pageviews/1/_update
{
   "script" : "ctx._source.views+=1",
   "upsert": {
       "views": 1
   }
}


# 检索多个文档

GET /_mget
{
   "docs" : [
      {
         "_index" : "website",
         "_type" :  "blog",
         "_id" :    2,
         "_source": "views"
      },
      {
         "_index" : "website",
         "_type" :  "pageviews",
         "_id" :    1
      }
   ]
}


GET /website/blog/_mget
{
   "docs" : [
      { "_id" : 2 },
      { "_type" : "pageviews", "_id" :   1 }
   ]
}

GET /website/blog/_mget
{
  "ids":["1","2"]
   
}

# 批量操作

POST /_bulk
{ "delete": { "_index": "website", "_type": "blog", "_id": "123" }} 
{ "create": { "_index": "website", "_type": "blog", "_id": "123" }}
{ "title":    "My first blog post" }
{ "index":  { "_index": "website", "_type": "blog" }}
{ "title":    "My second blog post" }
{ "update": { "_index": "website", "_type": "blog", "_id": "123", "_retry_on_conflict" : 3} }
{ "doc" : {"title" : "My updated blog post"} } 

POST /_bulk
{ "create": { "_index": "website", "_type": "blog", "_id": "123" }}
{ "title":    "Cannot create - it already exists" }
{ "index":  { "_index": "website", "_type": "blog", "_id": "123" }}
{ "title":    "But we can update it" }


POST /website/_bulk
{ "index": { "_type": "log" }}
{ "event": "User logged in" }


GET /website/log/_search


GET /website/blog/_search

GET /website/blog/_search?q=get


GET /website/pageviews/_search

GET /movies/movie/_search

GET /website/blog/_search?timeout=1ms

GET /_search?size=5

GET /website/_search

GET /website/log,blog/_search

GET /website/log,blog/_search?size=5&from=5

GET /w*,mov*/_search

POST /website/log/_bulk
{ "index": {}}
{ "event": "User logged in" }
{ "index": { "_type": "blog" }}
{ "title": "Overriding the default type" }

GET /_search?q=Boxcar



PUT /school/class/1
{
    "name":"74班",
    "date":"2003-09-01",
    "public":true,
    "age": 15
}



GET /school/class/_mapping


PUT /school/class/2
{
    "name":"72班",
    "date":"2004-09-01",
    "public":true,
    "age": 16,
    "score":88.8
}

GET /school/class/_mapping

# 建立映射

POST /library
{
    "mappings": {
        "books":{
            "properties": {
                "title":{"type": "string"},
                "name":{"type": "string","index": "not_analyzed"},
                 "name1":{"type": "string","index": "analyzed"}, 
                 "name2":{"type": "string","index": "no"},
                 "public_date":{"type": "date","index": "not_analyzed" },
                 "public_date1":{"type": "date","index": "no" },
                 "price":{"type": "float"},
                 "number":{"type": "integer"}
            }
        }
    }
}

GET /library/_mapping

PUT /library/books/1
{
    "name":"the boxcar children",
    "name1":"surprise island",
    "name2":"the yellow house mystery",
    "public_date":"2000-09-01",
    "public_date1":"2010-09-01",
    "price":100,
    "number":20
}

PUT /library/books/2
{
    "name":"2the boxcar children",
    "name1":"2surprise island",
    "name2":"2the yellow house mystery",
    "public_date":"2010-09-01",
    "public_date1":"2020-09-01",
    "price":20,
    "number":30
}

PUT /library/books/3
{
    "name":"Zootopia",
    "name1":"Zootropolis",
    "name2":"zoo",
    "public_date":"2016-03-04",
    "public_date1":"2016-03-04",
    "price":120,
    "number":30
}

GET /library/books/_search?q=name1:Zootropolis
GET /library/books/_search?q=public_date1:2010-09-01

# term 主要用于精确匹配 
GET /library/_search
{
 "filter":
 {"term": { "public_date": "2010-09-01" }

 }
}

GET /library/books/_search

# terms  允许指定多个匹配条件 ???查询结果与期望不一致 为什么没有结果？

GET /library/_search
{
    "filter": {"terms": {
       "name1": [
          "Zootropolis",
          "zoo"
       ]
    }}
}

# rang 过滤允许我们按照指定范围查找一批数据

GET /library/_search
{
   "filter": {"range": {
      "price": {
         "gte": 120,
         "lt": 200
      }
   }}
}

GET /library/_search
{
    "query": {"filtered": {
       "query": {"match": {
          "name1": "island"
       }},
       "filter": {"range": {
          "price": {
             "gte": 10,
             "lte": 200
          }
       }}
    }}
}


# exists 和 missing 过滤

GET /_search
{
   "filter": {"exists": {
      "field": "age"
   }}
}


GET library/_search
{
  "filter": {"missing": {
     "field": "age"
  }}
}

# bool 过滤可以用来合并多个过滤条件查询结果的布尔逻辑，
GET library/_search
{
    "filter": {"bool": {"must": [
       {"term": {
          "name1": "island"
       }
       }
    ],"must_not": [
       {"term": {
          "pirce": 100
       }}
    ]}
    
    }
}

GET library/_search
{
   "filter": {"bool": {"must_not": [
      {"term": {
         "price": 100
      }}
   ]}}
}

# 使用match_all 可以查询到所有文档，是没有查询条件下的默认语句。

GET movies/_search
{
    "filter": {"match_all": {}}
}

GET library/_search
{
"query": {"match_all": {}}    
}


# multi_match
# 查询允许你做match查询的基础上同时搜索多个字????

GET library/_search
{
    "query": {"multi_match": {
       "query": "surprise island",
       "fields": ["price","20"]
    }}
}

PUT /my_index
{
    "settings": { "number_of_shards": 1 }, 
    "mappings": {
        "my_type": {
            "properties": {
                "title": { 
                    "type":     "string",
                    "analyzer": "english",
                    "fields": {
                        "std":   { 
                            "type":     "string",
                            "analyzer": "standard"
                        }
                    }
                }
            }
        }
    }
}

PUT /my_index/my_type/1
{ "title": "My rabbit jumps" }

PUT /my_index/my_type/2
{ "title": "Jumping jack rabbits" }

GET /my_index/_search
{
   "query": {
        "match": {
            "title": "jumping rabbits"
        }
    }
}

PUT /indexy/typey/1
{
    "title":"My rabbit jumps"
}

PUT /indexy/typey/2
{
    "title":"Jumping jack rabbits"
}

GET /indexy/typey/_search
{
   "query": {"match": {
      "title": "jumping rabbit"
   }}
}

# 理解评分标准
GET /indexy/typey/_search?explain
{
   "query": {"match": {
      "title": "jumping rabbit"
   }}
}

GET /indexy/typey/2?explain

GET /my_index/_search
{
    "query": {"multi_match": {
       "query": "jumping rabbit",
       "type": "most_fields",
       "fields": ["title","title.std"]
    }}
}

# 验证查询语句没有_validate???

# 排序

GET /library/books/_search
{
    "sort": [
       {
          "public_date": {
             "order": "desc"
          }
       }
    ]
}



# ik 中文分词器
PUT index

PUT index/fulltext/_mapping 
{
    "fulltext": {
             "_all": {
            "analyzer": "ik_max_word",
            "search_analyzer": "ik_max_word",
            "term_vector": "no",
            "store": "false"
        },
        "properties": {
            "content": {
                "type": "string",
                "store": "no",
                "term_vector": "with_positions_offsets",
                "analyzer": "ik_max_word",
                "search_analyzer": "ik_max_word",
                "include_in_all": "true",
                "boost": 8
            }
        }
    }
}

POST /index/fulltext/1
{
    "content":"美国留给伊拉克的是个烂摊子吗"
}

POST /index/fulltext/2
{
    "content":"公安部：各地校车将享最高路权"
}

POST /index/fulltext/3
{
    "content":"中韩渔警冲突调查：韩警平均每天扣1艘中国渔船"
}

POST /index/fulltext/4
{
    "content":"中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首"
}

GET /index/fulltext/_search
{
    "query": {"term": {
      
          "content": "中国"
       
    }}
}

# 没有使用ik分词器

POST /noik/fulltext/1
{
    "content":"美国留给伊拉克的是个烂摊子吗"
}

POST /noik/fulltext/2
{
    "content":"公安部：各地校车将享最高路权"
}

POST /noik/fulltext/3
{
    "content":"中韩渔警冲突调查：韩警平均每天扣1艘中国渔船"
}

POST /noik/fulltext/4
{
    "content":"中国驻洛杉矶领事馆遭亚裔男子枪击 嫌犯已自首"
}

GET /noik/fulltext/_search
{
    "query": {"term": {
      
          "content": "中国"
       
    }}
}


PUT ctrip

DELETE ctrip


PUT ctrip/hotel/_mapping
{
  
    "properties": {
        "hotelID": {
            "type": "long"
        },
        "hotelName":{
            "type": "string",
            "store": "no",
            "term_vector": "with_positions_offsets",
            "analyzer": "ik_syno",
            "search_analyzer": "ik_syno",
            "include_in_all": "true",
            "boost": 8
        },
         "hotelDescription":{
            "type": "string",
            "store": "no",
            "term_vector": "with_positions_offsets",
            "analyzer": "ik_syno",
            "search_analyzer": "ik_syno",
            "include_in_all": "true",
            "boost": 8
        },
        "roomID": {
            "type": "long"
        },
        "roomName":{
            "type": "string",
            "store": "no",
            "term_vector": "with_positions_offsets",
            "analyzer": "ik_syno",
            "search_analyzer": "ik_syno",
            "include_in_all": "true",
            "boost": 8
        },
         "roomDescription":{
            "type": "string",
            "store": "no",
            "term_vector": "with_positions_offsets",
            "analyzer": "ik_syno",
            "search_analyzer": "ik_syno",
            "include_in_all": "true",
            "boost": 8
        }
    }
}


POST /ctrip/hotel/1
{
    "hotelID":10001,
    "roomID":101,
    "hotelName":"千岛湖绿城度假酒店",
    "roomName":"湖景豪华大床房",
    "roomDescription":"建筑面积79平方，不可以加床，最多可以入住2人",
    "hotelDescription":"千岛湖绿城度假酒店位于新安北路县政府隔壁，坐拥千岛湖镇核心的商业街区，三面环湖，有得天独厚的稀缺自然景观"
}


POST /ctrip/hotel/2
{
    "hotelID":10001,
    "roomID":102,
    "hotelName":"千岛湖绿城度假酒店",
    "roomName":"园景标准双床房",
    "roomDescription":"建筑面积79平方，不可以加床，最多可以入住2人",
    "hotelDescription":"千岛湖绿城度假酒店位于新安北路县政府隔壁，坐拥千岛湖镇核心的商业街区，三面环湖，有得天独厚的稀缺自然景观。"
}

GET /ctrip/_search
{
    "query": {"term": { 
          "hotelName": "酒店"
    }       
    }
}

GET /ctrip/_search
{
    "query": {"term": { 
          "hotelDescription": "新安北路"
    }       
    }
}

GET /ctrip/_search
{
    "query": {"term": { 
          "roomName":"园景"
    }       
    }
}

GET /ctrip/_search
{
    "query": {"term": { 
          "roomDescription": "建筑面积"
    }       
    }
}

GET /ctrip/hotel/_search


